#!/bin/bash
# Shebang: Chỉ định script chạy bằng Bash

# Nhập danh sách khối bộ nhớ
read -p "Nhập số lượng khối bộ nhớ: " n
# Yêu cầu người dùng nhập số lượng khối bộ nhớ và lưu vào biến n

mem_blocks=()
# Khởi tạo mảng rỗng mem_blocks để lưu kích thước các khối bộ nhớ

echo "Nhập kích thước từng khối bộ nhớ:"
# In thông báo yêu cầu nhập kích thước từng khối

for ((i = 0; i < n; i++)); do
    # Vòng lặp chạy n lần để nhập kích thước cho từng khối
    read -p "Khối $((i + 1)): " size
    # Yêu cầu nhập kích thước khối thứ i+1 (bắt đầu từ 1) và lưu vào biến size
    mem_blocks+=($size)
    # Thêm kích thước khối vào mảng mem_blocks
done
# Kết thúc vòng lặp nhập khối bộ nhớ

# Nhập danh sách tiến trình
read -p "Nhập số lượng tiến trình: " m
# Yêu cầu người dùng nhập số lượng tiến trình và lưu vào biến m

processes=()
# Khởi tạo mảng rỗng processes để lưu yêu cầu bộ nhớ của các tiến trình

echo "Nhập yêu cầu bộ nhớ từng tiến trình:"
# In thông báo yêu cầu nhập yêu cầu bộ nhớ từng tiến trình

for ((i = 0; i < m; i++)); do
    # Vòng lặp chạy m lần để nhập yêu cầu bộ nhớ cho từng tiến trình
    read -p "Tiến trình $((i + 1)): " req
    # Yêu cầu nhập yêu cầu bộ nhớ cho tiến trình thứ i+1 và lưu vào biến req
    processes+=($req)
    # Thêm yêu cầu bộ nhớ vào mảng processes
done
# Kết thúc vòng lặp nhập tiến trình

# Hàm hiển thị trạng thái bộ nhớ
show_memory() {
    local mem=("${@}")
    echo -n "Trạng thái bộ nhớ: ["
    for ((k = 0; k < ${#mem[@]}; k++)); do
        echo -n "${mem[k]}"
        if [ $k -lt $((${#mem[@]} - 1)) ]; then
            echo -n ", "
        fi
    done
    echo "]"
}

# --- First Fit ---
first_fit() {
    # Định nghĩa hàm first_fit cho thuật toán First Fit
    echo -e "\n=== Kết quả phân bổ theo First Fit ==="
    # In tiêu đề cho thuật toán First Fit, thêm dấu phân cách
    local mem=("${mem_blocks[@]}")
    # Tạo bản sao mảng mem_blocks để không ảnh hưởng dữ liệu gốc
    local allocated_count=0
    # Biến đếm số tiến trình được cấp phát
    echo "Bộ nhớ ban đầu: ${mem[*]}"
    # In trạng thái bộ nhớ ban đầu
    for ((i = 0; i < ${#processes[@]}; i++)); do
        # Vòng lặp duyệt qua từng tiến trình trong mảng processes
        allocated=0 # để kiểm tra xem bộ nhớ đã được cấp phát chưa
        # Khởi tạo biến allocated bằng 0 (0: chưa cấp, 1: đã cấp)
        for ((j = 0; j < ${#mem[@]}; j++)); do
            # Vòng lặp duyệt qua từng khối bộ nhớ trong mảng mem
            if [ ${mem[j]} -ge ${processes[i]} ]; then #-ge nghĩa là >=
                # Kiểm tra nếu kích thước khối lớn hơn hoặc bằng yêu cầu tiến trình
                echo "Tiến trình ${processes[i]} -> Khối ${mem[j]}"
                # In thông báo tiến trình được cấp phát vào khối
                mem[j]=$((mem[j] - processes[i]))
                # Giảm kích thước khối đi bằng yêu cầu của tiến trình
                allocated=1
                # Đặt allocated=1 để chỉ ra tiến trình đã được cấp phát
                allocated_count=$((allocated_count + 1))
                # Tăng số tiến trình được cấp phát
                show_memory "${mem[@]}"
                # Hiển thị trạng thái bộ nhớ sau khi cấp phát
                break #thoát ra vòng lặp
                # Thoát khỏi vòng lặp khối vì đã tìm thấy khối phù hợp
            fi #kết thúc if
            # Kết thúc câu lệnh if
        done #kết thúc vòng for
        # Kết thúc vòng lặp duyệt khối bộ nhớ
        [ $allocated -eq 0 ] && echo "Tiến trình ${processes[i]} -> Không được cấp phát" #-eq là =
        # Nếu allocated=0 (chưa cấp phát), in thông báo không cấp được
    done
    # Kết thúc vòng lặp duyệt tiến trình
    echo "Tóm tắt: $allocated_count/${#processes[@]} tiến trình được cấp phát."
    # In tóm tắt số tiến trình được cấp phát
}
# Kết thúc hàm first_fit

# --- Best Fit ---
best_fit() {
    # Định nghĩa hàm best_fit cho thuật toán Best Fit
    echo -e "\n=== Kết quả phân bổ theo Best Fit ==="
    # In tiêu đề cho thuật toán Best Fit
    local mem=("${mem_blocks[@]}")
    # Tạo bản sao mảng mem_blocks
    local allocated_count=0
    # Biến đếm số tiến trình được cấp phát
    echo "Bộ nhớ ban đầu: ${mem[*]}"
    # In trạng thái bộ nhớ ban đầu
    for ((i = 0; i < ${#processes[@]}; i++)); do
        # Vòng lặp duyệt từng tiến trình
        best=-1 # -1 nghĩa là chưa tìm ra khối phù hợp
        # Khởi tạo best=-1, chỉ ra chưa tìm thấy khối phù hợp
        for ((j = 0; j < ${#mem[@]}; j++)); do
            # Vòng lặp duyệt từng khối bộ nhớ
            if [ ${mem[j]} -ge ${processes[i]} ]; then
                # Kiểm tra nếu khối đủ lớn cho tiến trình
                if [ $best -eq -1 ] || [ ${mem[j]} -lt ${mem[best]} ]; then  #Kiểm tra xem đây là khối đầu tiên đủ lớn (best == -1) hoặc khối hiện tại nhỏ hơn khối tốt nhất trước đó (mem[j] < mem[best]). -lt: Toán tử “nhỏ hơn”.
                    # Nếu đây là khối đầu tiên đủ lớn hoặc nhỏ hơn khối tốt nhất trước đó
                    best=$j
                    # Cập nhật best thành chỉ số khối hiện tại
                fi
                # Kết thúc câu lệnh if kiểm tra khối nhỏ nhất
            fi
            # Kết thúc câu lệnh if kiểm tra khối đủ lớn
        done
        # Kết thúc vòng lặp duyệt khối bộ nhớ
        if [ $best -ne -1 ]; then # -ne là !=
            # Nếu tìm thấy khối phù hợp (best != -1)
            echo "Tiến trình ${processes[i]} -> Khối ${mem[best]}"
            # In thông báo tiến trình được cấp phát vào khối nhỏ nhất
            mem[best]=$((mem[best] - processes[i]))
            # Giảm kích thước khối đi bằng yêu cầu của tiến trình
            allocated_count=$((allocated_count + 1))
            # Tăng số tiến trình được cấp phát
            show_memory "${mem[@]}"
            # Hiển thị trạng thái bộ nhớ sau khi cấp phát
        else
            # Nếu không tìm thấy khối phù hợp
            echo "Tiến trình ${processes[i]} -> Không được cấp phát"
            # In thông báo không cấp phát được
        fi
        # Kết thúc câu lệnh if kiểm tra best
    done
    # Kết thúc vòng lặp duyệt tiến trình
    echo "Tóm tắt: $allocated_count/${#processes[@]} tiến trình được cấp phát."
    # In tóm tắt số tiến trình được cấp phát
}
# Kết thúc hàm best_fit

# --- Worst Fit ---
worst_fit() {
    # Định nghĩa hàm worst_fit cho thuật toán Worst Fit
    echo -e "\n=== Kết quả phân bổ theo Worst Fit ==="
    # In tiêu đề cho thuật toán Worst Fit
    local mem=("${mem_blocks[@]}")
    # Tạo bản sao mảng mem_blocks
    local allocated_count=0
    # Biến đếm số tiến trình được cấp phát
    echo "Bộ nhớ ban đầu: ${mem[*]}"
    # In trạng thái bộ nhớ ban đầu
    for ((i = 0; i < ${#processes[@]}; i++)); do
        # Vòng lặp duyệt từng tiến trình
        worst=-1
        # Khởi tạo worst=-1, chỉ ra chưa tìm thấy khối phù hợp
        for ((j = 0; j < ${#mem[@]}; j++)); do
            # Vòng lặp duyệt từng khối bộ nhớ
            if [ ${mem[j]} -ge ${processes[i]} ]; then
                # Kiểm tra nếu khối đủ lớn cho tiến trình
                if [ $worst -eq -1 ] || [ ${mem[j]} -gt ${mem[worst]} ]; then #gt toán tử lớn hơn
                    # Nếu đây là khối đầu tiên đủ lớn hoặc lớn hơn khối lớn nhất trước đó
                    worst=$j
                    # Cập nhật worst thành chỉ số khối hiện tại
                fi
                # Kết thúc câu lệnh if kiểm tra khối lớn nhất
            fi
            # Kết thúc câu lệnh if kiểm tra khối đủ lớn
        done
        # Kết thúc vòng lặp duyệt khối bộ nhớ
        if [ $worst -ne -1 ]; then
            # Nếu tìm thấy khối phù hợp (worst != -1)
            echo "Tiến trình ${processes[i]} -> Khối ${mem[worst]}"
            # In thông báo tiến trình được cấp phát vào khối lớn nhất
            mem[worst]=$((mem[worst] - processes[i]))
            # Giảm kích thước khối đi bằng yêu cầu của tiến trình
            allocated_count=$((allocated_count + 1))
            # Tăng số tiến trình được cấp phát
            show_memory "${mem[@]}"
            # Hiển thị trạng thái bộ nhớ sau khi cấp phát
        else
            # Nếu không tìm thấy khối phù hợp
            echo "Tiến trình ${processes[i]} -> Không được cấp phát"
            # In thông báo không cấp phát được
        fi
        # Kết thúc câu lệnh if kiểm tra worst
    done
    # Kết thúc vòng lặp duyệt tiến trình
    echo "Tóm tắt: $allocated_count/${#processes[@]} tiến trình được cấp phát."
    # In tóm tắt số tiến trình được cấp phát
}
# Kết thúc hàm worst_fit

# Gọi các hàm để chạy thuật toán
first_fit
best_fit
worst_fit
# Thực thi lần lượt các thuật toán
